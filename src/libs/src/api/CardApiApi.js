/**
 * CardsAgainstHumanity-Django API
 * Test description
 *
 * The version of the OpenAPI document: v1
 * Contact: contact@snippets.local
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BlackCard from '../model/BlackCard';
import InlineResponse200 from '../model/InlineResponse200';
import InlineResponse2001 from '../model/InlineResponse2001';
import WhiteCard from '../model/WhiteCard';

/**
* CardApi service.
* @module api/CardApiApi
* @version v1
*/
export default class CardApiApi {

    /**
    * Constructs a new CardApiApi. 
    * @alias module:api/CardApiApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the cardApiBlackCardsList operation.
     * @callback module:api/CardApiApi~cardApiBlackCardsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.search A search term.
     * @param {Number} opts.page A page number within the paginated result set.
     * @param {module:api/CardApiApi~cardApiBlackCardsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200}
     */
    cardApiBlackCardsList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'search': opts['search'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200;
      return this.apiClient.callApi(
        '/card-api/black_cards/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cardApiBlackCardsPartialUpdate operation.
     * @callback module:api/CardApiApi~cardApiBlackCardsPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BlackCard} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} cardId A unique integer value identifying this black card.
     * @param {module:model/BlackCard} data 
     * @param {module:api/CardApiApi~cardApiBlackCardsPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BlackCard}
     */
    cardApiBlackCardsPartialUpdate(cardId, data, callback) {
      let postBody = data;
      // verify the required parameter 'cardId' is set
      if (cardId === undefined || cardId === null) {
        throw new Error("Missing the required parameter 'cardId' when calling cardApiBlackCardsPartialUpdate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling cardApiBlackCardsPartialUpdate");
      }

      let pathParams = {
        'card_id': cardId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BlackCard;
      return this.apiClient.callApi(
        '/card-api/black_cards/{card_id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cardApiBlackCardsRead operation.
     * @callback module:api/CardApiApi~cardApiBlackCardsReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BlackCard} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} cardId A unique integer value identifying this black card.
     * @param {module:api/CardApiApi~cardApiBlackCardsReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BlackCard}
     */
    cardApiBlackCardsRead(cardId, callback) {
      let postBody = null;
      // verify the required parameter 'cardId' is set
      if (cardId === undefined || cardId === null) {
        throw new Error("Missing the required parameter 'cardId' when calling cardApiBlackCardsRead");
      }

      let pathParams = {
        'card_id': cardId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BlackCard;
      return this.apiClient.callApi(
        '/card-api/black_cards/{card_id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cardApiBlackCardsUpdate operation.
     * @callback module:api/CardApiApi~cardApiBlackCardsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BlackCard} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} cardId A unique integer value identifying this black card.
     * @param {module:model/BlackCard} data 
     * @param {module:api/CardApiApi~cardApiBlackCardsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BlackCard}
     */
    cardApiBlackCardsUpdate(cardId, data, callback) {
      let postBody = data;
      // verify the required parameter 'cardId' is set
      if (cardId === undefined || cardId === null) {
        throw new Error("Missing the required parameter 'cardId' when calling cardApiBlackCardsUpdate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling cardApiBlackCardsUpdate");
      }

      let pathParams = {
        'card_id': cardId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BlackCard;
      return this.apiClient.callApi(
        '/card-api/black_cards/{card_id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cardApiWhiteCardsList operation.
     * @callback module:api/CardApiApi~cardApiWhiteCardsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2001} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.search A search term.
     * @param {Number} opts.page A page number within the paginated result set.
     * @param {module:api/CardApiApi~cardApiWhiteCardsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2001}
     */
    cardApiWhiteCardsList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'search': opts['search'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2001;
      return this.apiClient.callApi(
        '/card-api/white_cards/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cardApiWhiteCardsPartialUpdate operation.
     * @callback module:api/CardApiApi~cardApiWhiteCardsPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WhiteCard} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} cardId A unique integer value identifying this white card.
     * @param {module:model/WhiteCard} data 
     * @param {module:api/CardApiApi~cardApiWhiteCardsPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WhiteCard}
     */
    cardApiWhiteCardsPartialUpdate(cardId, data, callback) {
      let postBody = data;
      // verify the required parameter 'cardId' is set
      if (cardId === undefined || cardId === null) {
        throw new Error("Missing the required parameter 'cardId' when calling cardApiWhiteCardsPartialUpdate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling cardApiWhiteCardsPartialUpdate");
      }

      let pathParams = {
        'card_id': cardId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WhiteCard;
      return this.apiClient.callApi(
        '/card-api/white_cards/{card_id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cardApiWhiteCardsRead operation.
     * @callback module:api/CardApiApi~cardApiWhiteCardsReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WhiteCard} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} cardId A unique integer value identifying this white card.
     * @param {module:api/CardApiApi~cardApiWhiteCardsReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WhiteCard}
     */
    cardApiWhiteCardsRead(cardId, callback) {
      let postBody = null;
      // verify the required parameter 'cardId' is set
      if (cardId === undefined || cardId === null) {
        throw new Error("Missing the required parameter 'cardId' when calling cardApiWhiteCardsRead");
      }

      let pathParams = {
        'card_id': cardId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WhiteCard;
      return this.apiClient.callApi(
        '/card-api/white_cards/{card_id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cardApiWhiteCardsUpdate operation.
     * @callback module:api/CardApiApi~cardApiWhiteCardsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WhiteCard} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} cardId A unique integer value identifying this white card.
     * @param {module:model/WhiteCard} data 
     * @param {module:api/CardApiApi~cardApiWhiteCardsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WhiteCard}
     */
    cardApiWhiteCardsUpdate(cardId, data, callback) {
      let postBody = data;
      // verify the required parameter 'cardId' is set
      if (cardId === undefined || cardId === null) {
        throw new Error("Missing the required parameter 'cardId' when calling cardApiWhiteCardsUpdate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling cardApiWhiteCardsUpdate");
      }

      let pathParams = {
        'card_id': cardId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WhiteCard;
      return this.apiClient.callApi(
        '/card-api/white_cards/{card_id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
