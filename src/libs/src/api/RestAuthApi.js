/**
 * Snippets API
 * Test description
 *
 * The version of the OpenAPI document: v1
 * Contact: contact@snippets.local
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Login from '../model/Login';
import PasswordChange from '../model/PasswordChange';
import PasswordReset from '../model/PasswordReset';
import PasswordResetConfirm from '../model/PasswordResetConfirm';
import Register from '../model/Register';
import UserDetails from '../model/UserDetails';
import VerifyEmail from '../model/VerifyEmail';

/**
* RestAuth service.
* @module api/RestAuthApi
* @version v1
*/
export default class RestAuthApi {

    /**
    * Constructs a new RestAuthApi. 
    * @alias module:api/RestAuthApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the restAuthLoginCreate operation.
     * @callback module:api/RestAuthApi~restAuthLoginCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Login} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check the credentials and return the REST Token if the credentials are valid and authenticated. Calls Django Auth login method to register User ID in Django session framework  Accept the following POST parameters: username, password Return the REST Framework Token Object's key.
     * @param {module:model/Login} data 
     * @param {module:api/RestAuthApi~restAuthLoginCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Login}
     */
    restAuthLoginCreate(data, callback) {
      let postBody = data;
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling restAuthLoginCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Login;
      return this.apiClient.callApi(
        '/rest-auth/login/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the restAuthLogoutCreate operation.
     * @callback module:api/RestAuthApi~restAuthLogoutCreateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Calls Django logout method and delete the Token object assigned to the current User object.
     * Accepts/Returns nothing.
     * @param {module:api/RestAuthApi~restAuthLogoutCreateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    restAuthLogoutCreate(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-auth/logout/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the restAuthLogoutList operation.
     * @callback module:api/RestAuthApi~restAuthLogoutListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Calls Django logout method and delete the Token object assigned to the current User object.
     * Accepts/Returns nothing.
     * @param {module:api/RestAuthApi~restAuthLogoutListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    restAuthLogoutList(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-auth/logout/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the restAuthPasswordChangeCreate operation.
     * @callback module:api/RestAuthApi~restAuthPasswordChangeCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PasswordChange} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Calls Django Auth SetPasswordForm save method.
     * Accepts the following POST parameters: new_password1, new_password2 Returns the success/fail message.
     * @param {module:model/PasswordChange} data 
     * @param {module:api/RestAuthApi~restAuthPasswordChangeCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PasswordChange}
     */
    restAuthPasswordChangeCreate(data, callback) {
      let postBody = data;
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling restAuthPasswordChangeCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PasswordChange;
      return this.apiClient.callApi(
        '/rest-auth/password/change/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the restAuthPasswordResetConfirmCreate operation.
     * @callback module:api/RestAuthApi~restAuthPasswordResetConfirmCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PasswordResetConfirm} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Password reset e-mail link is confirmed, therefore this resets the user's password.
     * Accepts the following POST parameters: token, uid,     new_password1, new_password2 Returns the success/fail message.
     * @param {module:model/PasswordResetConfirm} data 
     * @param {module:api/RestAuthApi~restAuthPasswordResetConfirmCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PasswordResetConfirm}
     */
    restAuthPasswordResetConfirmCreate(data, callback) {
      let postBody = data;
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling restAuthPasswordResetConfirmCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PasswordResetConfirm;
      return this.apiClient.callApi(
        '/rest-auth/password/reset/confirm/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the restAuthPasswordResetCreate operation.
     * @callback module:api/RestAuthApi~restAuthPasswordResetCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PasswordReset} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Calls Django Auth PasswordResetForm save method.
     * Accepts the following POST parameters: email Returns the success/fail message.
     * @param {module:model/PasswordReset} data 
     * @param {module:api/RestAuthApi~restAuthPasswordResetCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PasswordReset}
     */
    restAuthPasswordResetCreate(data, callback) {
      let postBody = data;
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling restAuthPasswordResetCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PasswordReset;
      return this.apiClient.callApi(
        '/rest-auth/password/reset/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the restAuthRegistrationCreate operation.
     * @callback module:api/RestAuthApi~restAuthRegistrationCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Register} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/Register} data 
     * @param {module:api/RestAuthApi~restAuthRegistrationCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Register}
     */
    restAuthRegistrationCreate(data, callback) {
      let postBody = data;
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling restAuthRegistrationCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Register;
      return this.apiClient.callApi(
        '/rest-auth/registration/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the restAuthRegistrationVerifyEmailCreate operation.
     * @callback module:api/RestAuthApi~restAuthRegistrationVerifyEmailCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VerifyEmail} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/VerifyEmail} data 
     * @param {module:api/RestAuthApi~restAuthRegistrationVerifyEmailCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VerifyEmail}
     */
    restAuthRegistrationVerifyEmailCreate(data, callback) {
      let postBody = data;
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling restAuthRegistrationVerifyEmailCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = VerifyEmail;
      return this.apiClient.callApi(
        '/rest-auth/registration/verify-email/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the restAuthUserPartialUpdate operation.
     * @callback module:api/RestAuthApi~restAuthUserPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserDetails} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reads and updates UserModel fields Accepts GET, PUT, PATCH methods.
     * Default accepted fields: username, first_name, last_name Default display fields: pk, username, email, first_name, last_name Read-only fields: pk, email  Returns UserModel fields.
     * @param {module:model/UserDetails} data 
     * @param {module:api/RestAuthApi~restAuthUserPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserDetails}
     */
    restAuthUserPartialUpdate(data, callback) {
      let postBody = data;
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling restAuthUserPartialUpdate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UserDetails;
      return this.apiClient.callApi(
        '/rest-auth/user/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the restAuthUserRead operation.
     * @callback module:api/RestAuthApi~restAuthUserReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserDetails} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reads and updates UserModel fields Accepts GET, PUT, PATCH methods.
     * Default accepted fields: username, first_name, last_name Default display fields: pk, username, email, first_name, last_name Read-only fields: pk, email  Returns UserModel fields.
     * @param {module:api/RestAuthApi~restAuthUserReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserDetails}
     */
    restAuthUserRead(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UserDetails;
      return this.apiClient.callApi(
        '/rest-auth/user/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the restAuthUserUpdate operation.
     * @callback module:api/RestAuthApi~restAuthUserUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserDetails} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reads and updates UserModel fields Accepts GET, PUT, PATCH methods.
     * Default accepted fields: username, first_name, last_name Default display fields: pk, username, email, first_name, last_name Read-only fields: pk, email  Returns UserModel fields.
     * @param {module:model/UserDetails} data 
     * @param {module:api/RestAuthApi~restAuthUserUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserDetails}
     */
    restAuthUserUpdate(data, callback) {
      let postBody = data;
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling restAuthUserUpdate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UserDetails;
      return this.apiClient.callApi(
        '/rest-auth/user/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
