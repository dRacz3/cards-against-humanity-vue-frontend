/**
 * CardsAgainstHumanity-Django API
 * Test description
 *
 * The version of the OpenAPI document: v1
 * Contact: contact@snippets.local
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CardSubmission from '../model/CardSubmission';
import GameRoundProfileData from '../model/GameRoundProfileData';
import GameSession from '../model/GameSession';
import InlineResponse2002 from '../model/InlineResponse2002';
import InlineResponse2003 from '../model/InlineResponse2003';
import InlineResponse2004 from '../model/InlineResponse2004';
import InlineResponse2005 from '../model/InlineResponse2005';
import SubmittedCardRequest from '../model/SubmittedCardRequest';

/**
* GameEngineApi service.
* @module api/GameEngineApiApi
* @version v1
*/
export default class GameEngineApiApi {

    /**
    * Constructs a new GameEngineApiApi. 
    * @alias module:api/GameEngineApiApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the gameEngineApiGameroundprofiledataCreate operation.
     * @callback module:api/GameEngineApiApi~gameEngineApiGameroundprofiledataCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameRoundProfileData} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/GameRoundProfileData} data 
     * @param {module:api/GameEngineApiApi~gameEngineApiGameroundprofiledataCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameRoundProfileData}
     */
    gameEngineApiGameroundprofiledataCreate(data, callback) {
      let postBody = data;
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling gameEngineApiGameroundprofiledataCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GameRoundProfileData;
      return this.apiClient.callApi(
        '/game_engine_api/gameroundprofiledata/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameEngineApiGameroundprofiledataList operation.
     * @callback module:api/GameEngineApiApi~gameEngineApiGameroundprofiledataListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2002} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page A page number within the paginated result set.
     * @param {module:api/GameEngineApiApi~gameEngineApiGameroundprofiledataListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2002}
     */
    gameEngineApiGameroundprofiledataList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2002;
      return this.apiClient.callApi(
        '/game_engine_api/gameroundprofiledata/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameEngineApiGameroundprofiledataPartialUpdate operation.
     * @callback module:api/GameEngineApiApi~gameEngineApiGameroundprofiledataPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameRoundProfileData} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id A unique integer value identifying this game round profile data.
     * @param {module:model/GameRoundProfileData} data 
     * @param {module:api/GameEngineApiApi~gameEngineApiGameroundprofiledataPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameRoundProfileData}
     */
    gameEngineApiGameroundprofiledataPartialUpdate(id, data, callback) {
      let postBody = data;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameEngineApiGameroundprofiledataPartialUpdate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling gameEngineApiGameroundprofiledataPartialUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GameRoundProfileData;
      return this.apiClient.callApi(
        '/game_engine_api/gameroundprofiledata/{id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameEngineApiGameroundprofiledataRead operation.
     * @callback module:api/GameEngineApiApi~gameEngineApiGameroundprofiledataReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameRoundProfileData} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id A unique integer value identifying this game round profile data.
     * @param {module:api/GameEngineApiApi~gameEngineApiGameroundprofiledataReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameRoundProfileData}
     */
    gameEngineApiGameroundprofiledataRead(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameEngineApiGameroundprofiledataRead");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GameRoundProfileData;
      return this.apiClient.callApi(
        '/game_engine_api/gameroundprofiledata/{id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameEngineApiGameroundprofiledataUpdate operation.
     * @callback module:api/GameEngineApiApi~gameEngineApiGameroundprofiledataUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameRoundProfileData} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id A unique integer value identifying this game round profile data.
     * @param {module:model/GameRoundProfileData} data 
     * @param {module:api/GameEngineApiApi~gameEngineApiGameroundprofiledataUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameRoundProfileData}
     */
    gameEngineApiGameroundprofiledataUpdate(id, data, callback) {
      let postBody = data;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gameEngineApiGameroundprofiledataUpdate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling gameEngineApiGameroundprofiledataUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GameRoundProfileData;
      return this.apiClient.callApi(
        '/game_engine_api/gameroundprofiledata/{id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameEngineApiSessionActionJoinCreate operation.
     * @callback module:api/GameEngineApiApi~gameEngineApiSessionActionJoinCreateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} roomName 
     * @param {module:api/GameEngineApiApi~gameEngineApiSessionActionJoinCreateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    gameEngineApiSessionActionJoinCreate(roomName, callback) {
      let postBody = null;
      // verify the required parameter 'roomName' is set
      if (roomName === undefined || roomName === null) {
        throw new Error("Missing the required parameter 'roomName' when calling gameEngineApiSessionActionJoinCreate");
      }

      let pathParams = {
        'room_name': roomName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/game_engine_api/session/action/join/{room_name}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameEngineApiSessionActionSubmitCreate operation.
     * @callback module:api/GameEngineApiApi~gameEngineApiSessionActionSubmitCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubmittedCardRequest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} roomName 
     * @param {module:model/SubmittedCardRequest} data 
     * @param {module:api/GameEngineApiApi~gameEngineApiSessionActionSubmitCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubmittedCardRequest}
     */
    gameEngineApiSessionActionSubmitCreate(roomName, data, callback) {
      let postBody = data;
      // verify the required parameter 'roomName' is set
      if (roomName === undefined || roomName === null) {
        throw new Error("Missing the required parameter 'roomName' when calling gameEngineApiSessionActionSubmitCreate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling gameEngineApiSessionActionSubmitCreate");
      }

      let pathParams = {
        'room_name': roomName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SubmittedCardRequest;
      return this.apiClient.callApi(
        '/game_engine_api/session/action/submit/{room_name}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameEngineApiSessionHasPlayerSubmittedList operation.
     * @callback module:api/GameEngineApiApi~gameEngineApiSessionHasPlayerSubmittedListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} sessionId 
     * @param {module:api/GameEngineApiApi~gameEngineApiSessionHasPlayerSubmittedListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    gameEngineApiSessionHasPlayerSubmittedList(sessionId, callback) {
      let postBody = null;
      // verify the required parameter 'sessionId' is set
      if (sessionId === undefined || sessionId === null) {
        throw new Error("Missing the required parameter 'sessionId' when calling gameEngineApiSessionHasPlayerSubmittedList");
      }

      let pathParams = {
        'session_id': sessionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/game_engine_api/session/{session_id}/has_player_submitted/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameEngineApiSessionMycardsList operation.
     * @callback module:api/GameEngineApiApi~gameEngineApiSessionMycardsListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} sessionId 
     * @param {module:api/GameEngineApiApi~gameEngineApiSessionMycardsListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    gameEngineApiSessionMycardsList(sessionId, callback) {
      let postBody = null;
      // verify the required parameter 'sessionId' is set
      if (sessionId === undefined || sessionId === null) {
        throw new Error("Missing the required parameter 'sessionId' when calling gameEngineApiSessionMycardsList");
      }

      let pathParams = {
        'session_id': sessionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/game_engine_api/session/{session_id}/mycards/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameEngineApiSessionProfilesList operation.
     * @callback module:api/GameEngineApiApi~gameEngineApiSessionProfilesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2002} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} sessionId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page A page number within the paginated result set.
     * @param {module:api/GameEngineApiApi~gameEngineApiSessionProfilesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2002}
     */
    gameEngineApiSessionProfilesList(sessionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'sessionId' is set
      if (sessionId === undefined || sessionId === null) {
        throw new Error("Missing the required parameter 'sessionId' when calling gameEngineApiSessionProfilesList");
      }

      let pathParams = {
        'session_id': sessionId
      };
      let queryParams = {
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2002;
      return this.apiClient.callApi(
        '/game_engine_api/session/{session_id}/profiles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameEngineApiSessionRoundsList operation.
     * @callback module:api/GameEngineApiApi~gameEngineApiSessionRoundsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2003} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} sessionId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page A page number within the paginated result set.
     * @param {module:api/GameEngineApiApi~gameEngineApiSessionRoundsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2003}
     */
    gameEngineApiSessionRoundsList(sessionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'sessionId' is set
      if (sessionId === undefined || sessionId === null) {
        throw new Error("Missing the required parameter 'sessionId' when calling gameEngineApiSessionRoundsList");
      }

      let pathParams = {
        'session_id': sessionId
      };
      let queryParams = {
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2003;
      return this.apiClient.callApi(
        '/game_engine_api/session/{session_id}/rounds', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameEngineApiSessionSubmissionsCreate operation.
     * @callback module:api/GameEngineApiApi~gameEngineApiSessionSubmissionsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CardSubmission} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} sessionId 
     * @param {module:model/CardSubmission} data 
     * @param {module:api/GameEngineApiApi~gameEngineApiSessionSubmissionsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CardSubmission}
     */
    gameEngineApiSessionSubmissionsCreate(sessionId, data, callback) {
      let postBody = data;
      // verify the required parameter 'sessionId' is set
      if (sessionId === undefined || sessionId === null) {
        throw new Error("Missing the required parameter 'sessionId' when calling gameEngineApiSessionSubmissionsCreate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling gameEngineApiSessionSubmissionsCreate");
      }

      let pathParams = {
        'session_id': sessionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CardSubmission;
      return this.apiClient.callApi(
        '/game_engine_api/session/{session_id}/submissions/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameEngineApiSessionSubmissionsList operation.
     * @callback module:api/GameEngineApiApi~gameEngineApiSessionSubmissionsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2004} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} sessionId 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page A page number within the paginated result set.
     * @param {module:api/GameEngineApiApi~gameEngineApiSessionSubmissionsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2004}
     */
    gameEngineApiSessionSubmissionsList(sessionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'sessionId' is set
      if (sessionId === undefined || sessionId === null) {
        throw new Error("Missing the required parameter 'sessionId' when calling gameEngineApiSessionSubmissionsList");
      }

      let pathParams = {
        'session_id': sessionId
      };
      let queryParams = {
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2004;
      return this.apiClient.callApi(
        '/game_engine_api/session/{session_id}/submissions/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameEngineApiSessionViewList operation.
     * @callback module:api/GameEngineApiApi~gameEngineApiSessionViewListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} sessionId 
     * @param {module:api/GameEngineApiApi~gameEngineApiSessionViewListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    gameEngineApiSessionViewList(sessionId, callback) {
      let postBody = null;
      // verify the required parameter 'sessionId' is set
      if (sessionId === undefined || sessionId === null) {
        throw new Error("Missing the required parameter 'sessionId' when calling gameEngineApiSessionViewList");
      }

      let pathParams = {
        'session_id': sessionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/game_engine_api/session/{session_id}/view', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameEngineApiSessionsCreate operation.
     * @callback module:api/GameEngineApiApi~gameEngineApiSessionsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameSession} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/GameSession} data 
     * @param {module:api/GameEngineApiApi~gameEngineApiSessionsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameSession}
     */
    gameEngineApiSessionsCreate(data, callback) {
      let postBody = data;
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling gameEngineApiSessionsCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GameSession;
      return this.apiClient.callApi(
        '/game_engine_api/sessions/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameEngineApiSessionsDelete operation.
     * @callback module:api/GameEngineApiApi~gameEngineApiSessionsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} sessionId A unique value identifying this game session.
     * @param {module:api/GameEngineApiApi~gameEngineApiSessionsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    gameEngineApiSessionsDelete(sessionId, callback) {
      let postBody = null;
      // verify the required parameter 'sessionId' is set
      if (sessionId === undefined || sessionId === null) {
        throw new Error("Missing the required parameter 'sessionId' when calling gameEngineApiSessionsDelete");
      }

      let pathParams = {
        'session_id': sessionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/game_engine_api/sessions/{session_id}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameEngineApiSessionsList operation.
     * @callback module:api/GameEngineApiApi~gameEngineApiSessionsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2005} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.search A search term.
     * @param {Number} opts.page A page number within the paginated result set.
     * @param {module:api/GameEngineApiApi~gameEngineApiSessionsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2005}
     */
    gameEngineApiSessionsList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'search': opts['search'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2005;
      return this.apiClient.callApi(
        '/game_engine_api/sessions/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameEngineApiSessionsPartialUpdate operation.
     * @callback module:api/GameEngineApiApi~gameEngineApiSessionsPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameSession} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} sessionId A unique value identifying this game session.
     * @param {module:model/GameSession} data 
     * @param {module:api/GameEngineApiApi~gameEngineApiSessionsPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameSession}
     */
    gameEngineApiSessionsPartialUpdate(sessionId, data, callback) {
      let postBody = data;
      // verify the required parameter 'sessionId' is set
      if (sessionId === undefined || sessionId === null) {
        throw new Error("Missing the required parameter 'sessionId' when calling gameEngineApiSessionsPartialUpdate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling gameEngineApiSessionsPartialUpdate");
      }

      let pathParams = {
        'session_id': sessionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GameSession;
      return this.apiClient.callApi(
        '/game_engine_api/sessions/{session_id}/', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameEngineApiSessionsRead operation.
     * @callback module:api/GameEngineApiApi~gameEngineApiSessionsReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameSession} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} sessionId A unique value identifying this game session.
     * @param {module:api/GameEngineApiApi~gameEngineApiSessionsReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameSession}
     */
    gameEngineApiSessionsRead(sessionId, callback) {
      let postBody = null;
      // verify the required parameter 'sessionId' is set
      if (sessionId === undefined || sessionId === null) {
        throw new Error("Missing the required parameter 'sessionId' when calling gameEngineApiSessionsRead");
      }

      let pathParams = {
        'session_id': sessionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GameSession;
      return this.apiClient.callApi(
        '/game_engine_api/sessions/{session_id}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gameEngineApiSessionsUpdate operation.
     * @callback module:api/GameEngineApiApi~gameEngineApiSessionsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GameSession} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} sessionId A unique value identifying this game session.
     * @param {module:model/GameSession} data 
     * @param {module:api/GameEngineApiApi~gameEngineApiSessionsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GameSession}
     */
    gameEngineApiSessionsUpdate(sessionId, data, callback) {
      let postBody = data;
      // verify the required parameter 'sessionId' is set
      if (sessionId === undefined || sessionId === null) {
        throw new Error("Missing the required parameter 'sessionId' when calling gameEngineApiSessionsUpdate");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling gameEngineApiSessionsUpdate");
      }

      let pathParams = {
        'session_id': sessionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GameSession;
      return this.apiClient.callApi(
        '/game_engine_api/sessions/{session_id}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
